{Application 'FISHERY_FMF_FMF_FMF' logic file generated by CSPro}
PROC GLOBAL

	//ID of children
	list children_id;
	numeric counter =1;
	
	//lIST OF hOUSEHOLD ROSTER IDs
	list HH_id;
	numeric HH_counter =0;


	//Sava partial Entries	
	function OnStop()
		string partial_save =  prompt("Enter Y to Save Incomplete entry or N to discard, or C to continue ?");
		if toupper(partial_save) = "Y" then
			savepartial();
		elseif toupper(partial_save) = "N" then
			stop();
		else
			reenter;
		endif;
	end;
	
	
	numeric mm;
	numeric HEAD_SELECTED = 0;

	function validateSpecifyInput(string variable, string str_value, numeric num)
		if variable = str_value then
			string word = prompt("Enter value");
			word = strip(word);
			if word = ""  or length(word)<num  then
				reenter;
			endif;
			variable = word;
		endif;
	end;


	//Get the number of digits in an integer
	function numeric getIntLength(numeric num)
		getIntLength = length(maketext("%d", num));
	end;

	function validateInteger(numeric num)
		if num <1 then
			errmsg("Enter positive number!");
			reenter;
		endif;
	end;
	
	//Validate hours
	function validateHour(numeric num, numeric time_left_in_minutes)
		if num < 0 or num > 24 then
			errmsg("Enter numbers between 0 - 24!");
			reenter;
		endif;
		
		if (num*60) > time_left_in_minutes then
			numeric minutes_reminder = time_left_in_minutes % 60;
			numeric hours_left = (time_left_in_minutes - minutes_reminder) / 60;
			errmsg("You have %d hours left", hours_left);
			reenter;
		endif
	end;
	
	//Validate minutes
	function validateMinute(numeric num, time_left_in_minutes)
		if num < 0 or num > 59 then
			errmsg("Enter numbers between 0 - 59!");
			reenter;
		endif;

		if num > time_left_in_minutes then
			errmsg("You have %d minutes left", time_left_in_minutes);
			reenter;
		endif		
	end;	
	
	
	
	
	function validateRange(numeric num, numeric num2, numeric num3)
		if num < num2 or num > num3 then
			errmsg("Enter numbers between %d - %d!", num2, num3);
			reenter;
		endif;
	end;
	
	
	function validateRate(numeric num)
		if num < 0 or num > 100 then
			errmsg("Enter numbers between 0 - 100 !");
			reenter;
		endif;
	end;
	
	
	function validateCurrency(string num )
		if regexmatch(num,  "/^[0-9]{1}(([0-9]{1})?){0,6}-[0-9]{1}(([0-9]{1})?){0,5}") = 0 then
			errmsg("Invalid format! Use the following format: 000000-000000");
			reenter;
		endif;
	end;
	
	function validatePhone(string num )
		//string num1 = maketext(num);
		if regexmatch(num,  "/0[0-9]{9}") = 0 then
			errmsg("Invalid format! Use the following format: 0203300066");
			reenter;
		endif;
	end;
		
	


	//Get GPS Address(Latitude, Longitude)
	function string getLatitude()
		string lat;
		gps(open); // on Android
		gps(open,3,4800); // on a laptop or Windows tablet; COM3, 4800 baud
		if gps(read,10) then // a successful attempt at a read, for up to five seconds
			errmsg("Latitude is %-10.6f",gps(latitude));
			lat =   maketext( "%-10.6f",  gps(latitude) );
		else
			lat= "N/A";
			errmsg("GPS signal could not be acquired");
		endif;
		gps(close);
		getLatitude = lat;
	end


	//Get GPS Address(Latitude, Longitude)
	function string getLongitude()
		string lon;
		gps(open); // on Android
		gps(open,3,4800); // on a laptop or Windows tablet; COM3, 4800 baud
		if gps(read,10) then // a successful attempt at a read, for up to five seconds
			//errmsg("Longitude is %-10.3f",gps(longitude));
			lon =  maketext( "%-10.6f", gps(longitude));
		else
			lon= "N/A";
			errmsg("GPS signal could not be acquired");
		endif;
		gps(close);
		getLongitude = lon;
	end


	//Get GPS Address(Latitude, Longitude)
	function string getAltitude()
		string alt;
		gps(open); // on Android
		gps(open,3,4800); // on a laptop or Windows tablet; COM3, 4800 baud
		if gps(read,10) then // a successful attempt at a read, for up to five seconds
			//errmsg("Altitude is %-10.3f",gps(altitude));
			alt =  maketext( "%-10.6f",  gps(altitude));
		else
			alt= "N/A";
			errmsg("GPS signal could not be acquired");
		endif;
		gps(close);
		getAltitude = alt;
	end

	//set null values, for Question 7 part 2.
	function setNotApplicable(string activity, numeric income, string skip_to)
		if strip(activity) = "" then
			activity = "N/A";
			income = notappl;
			skip to skip_to;
		endif;
	end;



//PROC Q4A_10_1_CONDIMENTS_AND_SPICES
//POSTPROC
		//validateRange(Q4A_10_1_CONDIMENTS_AND_SPICES, 0, 2000);
		
//PROC DAUGTHER_ACTIVITY
//POSTPROC
//	if strip(DAUGTHER_ACTIVITY) = "" then
	//	DAUGTHER_ACTIVITY = "N/A";
		//DAUGTHER_INCOME = notappl;
		//skip to NEPHEW_ACTIVITY;
	//endif;
//PROC DAUGTHER_INCOME
//POSTPROC
	//	validateRange(DAUGTHER_INCOME, 0, 999999);
//PROC NEPHEW_ACTIVITY
//POSTPROC
	//if strip(NEPHEW_ACTIVITY) = "" then
		//NEPHEW_ACTIVITY = "N/A";
		//NEPHEW_INCOME = notappl;
		//skip to NIECE_ACTIVITY1;
	//endif;
//PROC NEPHEW_INCOME
//POSTPROC
	//	validateRange(NEPHEW_INCOME, 0, 999999);

//PROC NIECE_ACTIVITY1
//POSTPROC
	//if strip(NIECE_ACTIVITY1) = "" then
		//NIECE_ACTIVITY1 = "N/A";
		//NIECE_INCOME = notappl;
		//skip to OTHER_ACTIVITY;
	//endif;
//PROC NIECE_INCOME
//POSTPROC
	//	validateRange(NIECE_INCOME, 0, 999999);

//PROC SON_ACTIVITY
//POSTPROC
	//if strip(SON_ACTIVITY) = "" then
		//SON_ACTIVITY = "N/A";
		//SON_INCOME = notappl;
		//skip to DAUGTHER_ACTIVITY;
	//endif;
//PROC SON_INCOME
//POSTPROC
	//	validateRange(SON_INCOME, 0, 999999);
PROC FISHERY_FF

PROC ID




PROC CONSENT
POSTPROC 
	if strip(CONSENT) = "NO" then
		skip to TIME;
	endif;
PROC AREA_CODES
gps(open); // on Android
gps(open,3,4800);

PROC INTERVIWER_ID
	
PROC HOUSEHOLD_ID


POSTPROC
	numeric question_number = ID;
	if AREA_CODES = 0201 then
		HOUSEHOLD_ID = maketext("%s-%d-%d",getlabel(AREA_CODES,201) ,INTERVIWER_ID ,question_number);
		
	elseif AREA_CODES = 0202 then
		HOUSEHOLD_ID = maketext("%s-%d-%d",getlabel(AREA_CODES,202) ,INTERVIWER_ID ,question_number);
		
	elseif AREA_CODES = 0203 then
		HOUSEHOLD_ID = maketext("%s-%d-%d",getlabel(AREA_CODES,203) ,INTERVIWER_ID ,question_number);
		
	elseif AREA_CODES = 0101 then
		HOUSEHOLD_ID = maketext("%s-%d-%d",getlabel(AREA_CODES,101) ,INTERVIWER_ID ,question_number);
		
	elseif AREA_CODES = 0301 then
		HOUSEHOLD_ID = strip(maketext("%s-%d-%d",getlabel(AREA_CODES,301) ,INTERVIWER_ID ,question_number));
	endif;

	string val = strip(HOUSEHOLD_ID);
	string caseLabel = maketext("%s-%03d",val, ID);
	setcaselabel(FISHERY_DICT, caseLabel);
PROC DATE	
PREPROC
	 if demode() = MODIFY and  strip(DATE) <> "" then
		skip to RESPONDENT_CONTACT;
	 endif;
	 DATE = timestring('%F', timestamp());
		
	
	
	
PROC STARTING_TIME	
PREPROC
	 STARTING_TIME = timestring('%X', timestamp());
	
PROC RESPONDENT_CONTACT
POSTPROC		
	//validatePhone(RESPONDENT_CONTACT)
	if(getIntLength(RESPONDENT_CONTACT) <> 9) then
		errmsg("Respondent Contact must be 10 digits!!!");
		reenter;
	endif;
	
PROC GPS_LATITUDE	
PREPROC
	GPS_LATITUDE = getLatitude();
		
PROC GPS_LONGITUDE
PREPROC
	GPS_LONGITUDE = getLongitude();
	
PROC GPS_ALTITUDE
PREPROC
	GPS_ALTITUDE = getAltitude();

PROC SECTION_1_PART_1000

PROC Q1_1

POSTPROC
PROC Q1_4_AGE
POSTPROC
		validateRange(Q1_4_AGE, 1, 150);
		if  Q1_4_AGE < 16 then
			children_id.add(Q1_1);
		endif;
		 
		
		
PROC Q1_3_HOUSEHOLD_RELATIONSHIP
		numeric child = length(children_id);

	if HEAD_SELECTED=1 and Q1_3_HOUSEHOLD_RELATIONSHIP=1  then
		errmsg("Household cannot have 2 heads!");
		reenter;
	elseif Q1_3_HOUSEHOLD_RELATIONSHIP=1 and  Q1_4_AGE < 16 then
		errmsg("Household head cannot be less than 16 years");
		reenter;
	endif;
PROC Q1_5_MARITAL_STATUS

PREPROC
	if Q1_4_AGE < 16 then
		Q1_5_MARITAL_STATUS = 6;
		skip to Q1_6_EDUCATION;
	endif;
PROC Q1_6_EDUCATION
POSTPROC
		validateRange(Q1_6_EDUCATION, 0, Q1_4_AGE);

PROC Q1_10_YEARS_IN_COMMUNITY	
POSTPROC
		validateRange(Q1_10_YEARS_IN_COMMUNITY, 0, Q1_4_AGE);
		
		string cont = prompt("Enter Y to add another Household Roster or N to skip to next section");
		if toupper(cont) = "N" then
			skip to HOUSEHOLD_ROASTER_ID1(1);
			if length(children_id) < 1 then
				skip to Q2_0_TOILET_TYPE;
			else skip to HOUSEHOLD_ROASTER_ID1(1);
			endif;
		elseif cont = "" then
				reenter;
		else 
		endif;
		
		if Q1_3_HOUSEHOLD_RELATIONSHIP = 1 then
			HEAD_SELECTED = 1;
		endif;
		

PROC HOUSEHOLD_ROASTER_ID1

PREPROC
	numeric num_children = length(children_id);
	
	if counter <= num_children then
		HOUSEHOLD_ROASTER_ID1(counter) = children_id(counter);
		counter = counter + 1;
	else 
		//numeric val = counter - 1;
		skip to Q2_0_TOILET_TYPE;
	endif;
	
	
PROC Q2_3_WEIGHT_IN_KG
POSTPROC
		validateRange(Q2_3_WEIGHT_IN_KG, 1, 300);

PROC Q2_4_HEIGHT_IN_CM
POSTPROC
		validateRange(Q2_4_HEIGHT_IN_CM, 30, 305);
		
PROC Q2_5_MID_UPPER_CIRCUMFERENCE
POSTPROC
	validateRange(Q2_5_MID_UPPER_CIRCUMFERENCE, 5, 200);
	//string cont = prompt("Enter Y to add another Household Roster or N to skip to next section");
	//if toupper(cont) = "N" then
	//	skip to Q2_0_TOILET_TYPE;
	//elseif cont = "" then
	//	reenter;		
	//endif;



PROC Q2_0_TOILET_TYPE

PREPROC 
 counter = 1;
PROC Q4
POSTPROC
	validateSpecifyInput(Q4, 'D',2);
	
PROC Q5_RELIGIOUS_LEVEL
POSTPROC
	validateRange(Q5_RELIGIOUS_LEVEL, 0, 100 );
	
PROC Q6_AVERAGE_MONTHLY_ECG_BILL1
POSTPROC
	validateRange(Q6_AVERAGE_MONTHLY_ECG_BILL1, 0, 999999 );

//PROC Q4A_1_1_STARCHY_STAPLES_CONSUMED
//POSTPROC
	//	validateRange(Q4A_1_1_STARCHY_STAPLES_CONSUMED, 0, 2000);

PROC Q4A_1_3_AVERAGE_PRICE_PER_PURCHASE_UNITS_IN_CEDI
POSTPROC
		validateRange(Q4A_1_3_AVERAGE_PRICE_PER_PURCHASE_UNITS_IN_CEDI, 0, 2000);
		
//PROC Q4A_2_1_VEGETABLES_CONSUMED
//POSTPROC
		//validateRange(Q4A_2_1_VEGETABLES_CONSUMED, 0, 2000);
		
PROC Q4A_2_3_AVERAGE_PRICE_PER_PURCHASE_UNITS
POSTPROC
		validateRange(Q4A_2_3_AVERAGE_PRICE_PER_PURCHASE_UNITS, 0, 2000);
		
//PROC Q4A_3_1_LEGUMES_NUTS_AND_SEEDS_CONSUMED
//POSTPROC
	//	validateRange(Q4A_3_1_LEGUMES_NUTS_AND_SEEDS_CONSUMED, 0, 2000);
		
PROC Q4A_3_3_AVERAGE_PRICE_PER_PURCHASE_UNITS
POSTPROC
		validateRange(Q4A_3_3_AVERAGE_PRICE_PER_PURCHASE_UNITS, 0, 2000);
		
//PROC Q4A_4_1_FRUITS
//POSTPROC
	//	validateRange(Q4A_4_1_FRUITS, 0, 2000);
		
PROC Q4A_4_3_AVERAGE_PRICE_PER_PURCHASE_UNITS_IN_CEDI
POSTPROC
		validateRange(Q4A_4_3_AVERAGE_PRICE_PER_PURCHASE_UNITS_IN_CEDI, 0, 2000);
		
//PROC Q4A_5_1_MEATS_AND_EGGS_CONSUMED
//POSTPROC
	//	validateRange(Q4A_5_1_MEATS_AND_EGGS_CONSUMED, 0, 2000);
		
PROC Q4A_5_3_AVERAGE_PRICE_PER_PURCHASE_UNITS_IN_CEDI
POSTPROC
		validateRange(Q4A_5_3_AVERAGE_PRICE_PER_PURCHASE_UNITS_IN_CEDI, 0, 2000);
		
//PROC Q4A_6_1_FISH_AND_SEA_FOODS
//POSTPROC
	//	validateRange(Q4A_6_1_FISH_AND_SEA_FOODS, 0, 2000);
		
PROC Q4A_6_3_AVERAGE_PRICE_PER_PURCHASE_UNITS_IN_CEDI
POSTPROC
		validateRange(Q4A_6_3_AVERAGE_PRICE_PER_PURCHASE_UNITS_IN_CEDI, 0, 2000);
		
//PROC Q4A_7_1_DIARY_PRODUCTS
//POSTPROC
	//	validateRange(Q4A_7_1_DIARY_PRODUCTS, 0, 2000);
		
PROC Q4A_7_3_AVERAGE_PRICE_PER_PURCHASE_UNITS_IN_CEDI
POSTPROC
		validateRange(Q4A_7_3_AVERAGE_PRICE_PER_PURCHASE_UNITS_IN_CEDI, 0, 2000);
		
//PROC Q4A_8_1_BEVERAGES
//POSTPROC
	//	validateRange(Q4A_8_1_BEVERAGES, 0, 2000);
		
PROC Q4A_8_3_AVERAGE_PRICE_PER_PURCHASE_UNITS_IN_CEDI
POSTPROC
		validateRange(Q4A_8_3_AVERAGE_PRICE_PER_PURCHASE_UNITS_IN_CEDI, 0, 2000);
		
//PROC Q4A_9_1_DRINKS
//POSTPROC
		//validateRange(Q4A_9_1_DRINKS, 0, 2000);
		
PROC Q4A_9_3_AVERAGE_PRICE_PER_PURCHASE_UNITS_IN_CEDI
POSTPROC
		validateRange(Q4A_9_3_AVERAGE_PRICE_PER_PURCHASE_UNITS_IN_CEDI, 0, 2000);
		
PROC Q4A_10_3_AVERAGE_PRICE_PER_PURCHASE_UNITS_IN_CED
POSTPROC
		validateRange(Q4A_10_3_AVERAGE_PRICE_PER_PURCHASE_UNITS_IN_CED, 0, 2000);
		
//PROC Q4A_11_1_SNACKS_BOUGHTS
//POSTPROC
	//	validateRange(Q4A_11_1_SNACKS_BOUGHTS, 0, 2000);
		
PROC Q4A_11_3_AVERAGE_PRICE_PER_PURCHASE_UNITS_IN_CED
POSTPROC
		validateRange(Q4A_11_3_AVERAGE_PRICE_PER_PURCHASE_UNITS_IN_CED, 0, 2000);
//PROC Q4A_12_1_FATS_AND_OIL
//POSTPROC
	//	validateRange(Q4A_12_1_FATS_AND_OIL, 0, 2000);
		
PROC Q4A_12_3_AVERAGE_PRICE_PER_PURCHASE_UNITS_IN_CED
POSTPROC
		validateRange(Q4A_12_3_AVERAGE_PRICE_PER_PURCHASE_UNITS_IN_CED, 0, 2000);

PROC Q4_B1_RENT7
POSTPROC
	validateRange(Q4_B1_RENT7, 0, 999999);

	
PROC Q4_B2_PERSONAL_CARE_SUPPLIES
POSTPROC
		validateRange(Q4_B2_PERSONAL_CARE_SUPPLIES, 0, 999999);
	

	
PROC Q4_B3_CLOTHE_SHOES_BAGS
POSTPROC
		validateRange(Q4_B3_CLOTHE_SHOES_BAGS, 0, 999999);
PROC Q4_B4_DEETERGENT
POSTPROC
		validateRange(Q4_B4_DEETERGENT, 0, 999999);
PROC Q4_B5_ELECTRICITY_WATER_GAS_FUEL
POSTPROC
		validateRange(Q4_B5_ELECTRICITY_WATER_GAS_FUEL, 0, 999999);

PROC Q4_B5_WATER

POSTPROC
		validateRange(Q4_B5_WATER, 0, 999999);
PROC Q4_B5_LPG
POSTPROC
		validateRange(Q4_B5_LPG, 0, 999999);
PROC Q4_B5_FUEL
POSTPROC
		validateRange(Q4_B5_FUEL, 0, 999999);
PROC Q4_B6_ROUTINE_MAINTENANCE
POSTPROC
		validateRange( Q4_B6_ROUTINE_MAINTENANCE, 0, 999999);

PROC Q4_B7_HOUSEHOLD_APPLIANCES
POSTPROC
		validateRange( Q4_B7_HOUSEHOLD_APPLIANCES, 0, 999999);

PROC Q4_B8_OTHER_NON_FOOD
POSTPROC
		validateRange(Q4_B8_OTHER_NON_FOOD, 0, 999999);
PROC Q4B10_PUBLIC_TRANSPORT
POSTPROC
		validateRange(Q4B10_PUBLIC_TRANSPORT, 0, 999999);

PROC Q4B11_AIRTIME_OR_COMMUNICATION_CHARGES
POSTPROC
	validateRange(Q4B11_AIRTIME_OR_COMMUNICATION_CHARGES, 0, 999999);

PROC Q4B12_MOBILE_HANDSET
POSTPROC
		validateRange(Q4B12_MOBILE_HANDSET, 0, 999999);
PROC Q4B13_OTHER_TRANSPORTATION_COST

POSTPROC
		validateRange(Q4B13_OTHER_TRANSPORTATION_COST, 0, 999999);
PROC Q4B14_PRIMARY_EXPENSES
POSTPROC
		validateRange(Q4B14_PRIMARY_EXPENSES, 0, 999999);
PROC Q4B15_JHS_SCHOOL_FEES_BOOKS

POSTPROC
		validateRange(Q4B15_JHS_SCHOOL_FEES_BOOKS, 0, 999999);
PROC Q4B16_SHS_SCHOOL_FESS_BOOKS


POSTPROC
		validateRange(Q4B16_SHS_SCHOOL_FESS_BOOKS, 0, 999999);
PROC Q4B17_TERTIARY_ACCOMODATION_TUITION

POSTPROC
		validateRange(Q4B17_TERTIARY_ACCOMODATION_TUITION, 0, 999999);
PROC Q4B18_APPRENTICESHIP_FEES

POSTPROC
		validateRange(Q4B18_APPRENTICESHIP_FEES, 0, 999999);
PROC Q4B19_MEDICATION_AND_CONSULTATION_FEES5

POSTPROC
		validateRange(Q4B19_MEDICATION_AND_CONSULTATION_FEES5, 0, 999999);
PROC Q4B20_OTHER_HEALTH_COST

POSTPROC
		validateRange(Q4B20_OTHER_HEALTH_COST, 0, 999999);
PROC Q4B21_CELEBRATION_AND_FUNERAL_COST

POSTPROC
		validateRange(Q4B21_CELEBRATION_AND_FUNERAL_COST, 0, 999999);
PROC Q4B22_RECREATION_AND_ENTERTAINMENT

POSTPROC
		validateRange(Q4B22_RECREATION_AND_ENTERTAINMENT, 0, 999999);
PROC Q4B23_CONTRIBUTION_CHURCH

POSTPROC
		validateRange(Q4B23_CONTRIBUTION_CHURCH, 0, 999999);
PROC Q4B24_REMITTANCES

POSTPROC
		validateRange(Q4B24_REMITTANCES, 0, 999999);
PROC SECTION5_PART_2_10

POSTPROC
	validateSpecifyInput(SECTION5_PART_2_10,'D',2);

PROC SECTION5_PART_2_12

POSTPROC		
	validateSpecifyInput(SECTION5_PART_2_12,'D',2);
	
PROC SECTION5_PART_2_13

POSTPROC		
	validateSpecifyInput(SECTION5_PART_2_13,'D',2);
	
PROC SECTION5_PART_2_15

POSTPROC		
	validateSpecifyInput(SECTION5_PART_2_15,'D',2);
	
PROC SECTION5_PART_2_16

POSTPROC		
	validateSpecifyInput(SECTION5_PART_2_16, 'D', 2);
	
PROC SECTION_7_Q_1
	if SECTION_7_Q_1 = "B" then
		SECTION_7_Q_2 = "N/A";
		skip to SECTION_7_Q_3 
	endif
	
PROC SECTION_7_Q_2

POSTPROC
	validateSpecifyInput(SECTION_7_Q_2,'D',2);
		
PROC SECTION_7_Q_3

	if SECTION_7_Q_3 = "B" then
		SECTION_7_Q_4 = "N/A";
		skip to SECTION_7_Q_5 
	endif
PROC SECTION_7_Q_4


POSTPROC
	validateSpecifyInput(SECTION_7_Q_4,'C',2);
	
PROC SECTION_7_Q_5

POSTPROC
	validateSpecifyInput(SECTION_7_Q_5, 'F', 2);
	
PROC SECTION_7_Q_6

POSTPROC
		validateRange(SECTION_7_Q_6, 0, 50);
PROC SELF_ACTIVITY
POSTPROC
	if strip(SELF_ACTIVITY) = "" then
		SELF_ACTIVITY = "N/A";
		SELF_AVERAGE_MONTH_INCOME = 0;
		skip to SPOUSE_ACTIVITY;
	endif;
PROC SELF_AVERAGE_MONTH_INCOME
POSTPROC
	validateRange(SELF_AVERAGE_MONTH_INCOME, 0, 999999);
PROC SPOUSE_ACTIVITY
POSTPROC
	if strip(SPOUSE_ACTIVITY) = "" then
		SPOUSE_ACTIVITY = "N/A";
		SPOUSE_INCOME = 0;
		skip to CHILDREN(1);
	endif;
PROC SPOUSE_INCOME
POSTPROC
	//validateRange(SELF_AVERAGE_MONTH_INCOME, 0, 999999);
PROC CHILDREN

POSTPROC
	if CHILDREN = 5 then
		skip to OTHER_ACTIVITY;
	endif;
PROC CHILD_ACTIVITY

POSTPROC
	if strip(CHILD_ACTIVITY) = "" then
		CHILD_ACTIVITY = "N/A";
		CHILD_AVERAGE_MONTH_INCOME = 0;
		skip to OTHER_ACTIVITY;
	endif;
PROC CHILD_AVERAGE_MONTH_INCOME
POSTPROC
		validateRange(CHILD_AVERAGE_MONTH_INCOME, 0, 999999);
		
		string cont = prompt("Enter Y to add another Child or N to skip to next section");
		if toupper(cont) = "N" then
			skip to OTHER_ACTIVITY;
			
		
		elseif cont = "" then
				reenter;
		endif;
PROC OTHER_ACTIVITY
POSTPROC
	if strip(OTHER_ACTIVITY) = "" then
		OTHER_ACTIVITY = "N/A";
		OTHER_INCOME = 0;
		skip to Q1;
	endif;
PROC OTHER_INCOME
POSTPROC
		validateRange(OTHER_INCOME, 0, 999999);

PROC Q41
POSTPROC
	if Q41 = "A" then
		Q5 = notappl;
		Q6 = notappl;
		skip to LAST_MAJOR_GOOD_QUANTITY;
	endif;

	if Q41 = "C" then
		Q5 = notappl;
		skip to Q6;
	endif;
	
PROC Q5
POSTPROC
	validateRange(Q5, 0, 100);
	Q6 = notappl;
	skip to LAST_MAJOR_GOOD_QUANTITY;
	
PROC Q6
POSTPROC
		validateRange(Q6, 0, 999999);
PROC LAST_MAJOR_GOOD_QUANTITY

POSTPROC
	validateRange(LAST_MAJOR_GOOD_QUANTITY, 0, 1000);
	if LAST_MAJOR_GOOD_QUANTITY = 0 then
		LAST_MAJOR_GOOD_VALUE =0; 
		skip to LAST_MAJOR_BAD_QUANTITY;
	endif;
PROC LAST_MAJOR_UNIT

POSTPROC		
	validateSpecifyInput(LAST_MAJOR_UNIT ,"5", 2);
	
PROC LAST_MAJOR_GOOD_VALUE

POSTPROC
		validateRange(LAST_MAJOR_GOOD_VALUE, 0, 999999);
PROC LAST_MAJOR_BAD_QUANTITY

POSTPROC
	validateRange(LAST_MAJOR_BAD_QUANTITY, 0, 1000);
	if LAST_MAJOR_BAD_QUANTITY = 0 then
		LAST_MAJOR_BAD_VALUE =0; 
		skip to LAST_MAJOR_AVERAGE_QUANTITY;
	endif;
PROC LAST_MAJOR_BAD_UNIT1

POSTPROC		
	validateSpecifyInput(LAST_MAJOR_BAD_UNIT1,"5", 2);
	
PROC LAST_MAJOR_BAD_VALUE

POSTPROC
		validateRange(LAST_MAJOR_BAD_VALUE, 0, 999999);
PROC LAST_MAJOR_AVERAGE_QUANTITY

POSTPROC
	validateRange(LAST_MAJOR_AVERAGE_QUANTITY, 0, 1000);
	if LAST_MAJOR_AVERAGE_QUANTITY = 0 then
		 LAST_MAJOR_AVERAGE_VALUE =0; 
		skip to LAST_MINOR_GOOD_QUANTITY ;
	endif;


PROC LAST_MAJOR_AVERAGE_UNIT

POSTPROC		
	validateSpecifyInput(LAST_MAJOR_AVERAGE_UNIT,"5",2);
	
PROC LAST_MAJOR_AVERAGE_VALUE

POSTPROC
		validateRange(LAST_MAJOR_AVERAGE_VALUE, 0, 999999);
PROC LAST_MINOR_GOOD_QUANTITY

POSTPROC
		validateRange(LAST_MINOR_GOOD_QUANTITY, 0, 1000);
	if LAST_MINOR_GOOD_QUANTITY = 0 then
		 LAST_MINOR_GOOD_VALUE =0; 
		skip to MINOR_BAD_QUANTITY;
	endif;
PROC LAST_MINOR_UNIT2

POSTPROC		
	validateSpecifyInput(LAST_MINOR_UNIT2, "5",0);
	
PROC LAST_MINOR_GOOD_VALUE

POSTPROC
		validateRange(LAST_MINOR_GOOD_VALUE, 0, 999999);
PROC MINOR_BAD_QUANTITY

POSTPROC
		validateRange(MINOR_BAD_QUANTITY, 0, 1000);

	if MINOR_BAD_QUANTITY = 0 then
		 MINOR_BAD_VALUE =0; 
		skip to LAST_MINOR_AVERAGE_QUNATITY;
	endif;
PROC LAST_MINOR_BAD_UNIT

POSTPROC		
	validateSpecifyInput(LAST_MINOR_BAD_UNIT, "5",2);
	
PROC MINOR_BAD_VALUE

POSTPROC
		validateRange(MINOR_BAD_VALUE, 0, 999999);
PROC LAST_MINOR_AVERAGE_QUNATITY

POSTPROC
		validateRange(LAST_MINOR_AVERAGE_QUNATITY, 0, 1000);

	if LAST_MINOR_AVERAGE_QUNATITY = 0 then
		 LAST_MINOR_AVERAGE_VALUE =0; 
		skip to LAST_OFF_SEASON_QUANTITY;
	endif;
PROC LAST_MINOR_AVERAGE_UNIT

POSTPROC		
	validateSpecifyInput(LAST_MINOR_AVERAGE_UNIT, "5",2);
	
PROC LAST_MINOR_AVERAGE_VALUE

POSTPROC
		validateRange(LAST_MINOR_AVERAGE_VALUE, 0, 999999);
PROC LAST_OFF_SEASON_QUANTITY

POSTPROC
		validateRange(LAST_OFF_SEASON_QUANTITY, 0, 1000);

	if LAST_OFF_SEASON_QUANTITY = 0 then
		 LAST_OFF_SEASON_VALUE =0; 
		skip to LAST_OFF_SEASON_BAD_QUANTITY;
	endif;
PROC LAST_OFF_GOOD_SEASON_UNIT

POSTPROC		
	validateSpecifyInput(LAST_OFF_GOOD_SEASON_UNIT, "5",2);
	
PROC LAST_OFF_SEASON_VALUE

POSTPROC
		validateRange(LAST_OFF_SEASON_VALUE, 0, 999999);
PROC LAST_OFF_SEASON_BAD_QUANTITY

POSTPROC
		validateRange(LAST_OFF_SEASON_BAD_QUANTITY, 0, 1000);

	if LAST_OFF_SEASON_BAD_QUANTITY = 0 then
		 LAST_OFF_SEASON_BAD_VALUE =0; 
		skip to LAST_OFF_SEASON_AVERAGE_QUANTITY;
	endif;
PROC LAST_OFF_BAD_UNIT

POSTPROC		
	validateSpecifyInput(LAST_OFF_BAD_UNIT,"5",2);
	
PROC LAST_OFF_SEASON_BAD_VALUE

POSTPROC
		validateRange(LAST_OFF_SEASON_BAD_VALUE, 0, 999999);
PROC LAST_OFF_SEASON_AVERAGE_QUANTITY

POSTPROC
		validateRange(LAST_OFF_SEASON_AVERAGE_QUANTITY, 0, 1000);

	if LAST_OFF_SEASON_AVERAGE_QUANTITY = 0 then
		 LAST_OFF_SEASON_AVERAGE_VALUE =0; 
		skip to Q8_1_MAJOR_SEASON;
	endif;
PROC LAST_OFF_SEASON_AVERAGE_UNIT

POSTPROC		
	validateSpecifyInput(LAST_OFF_SEASON_AVERAGE_UNIT, "5",2);
	
PROC LAST_OFF_SEASON_AVERAGE_VALUE

POSTPROC
		validateRange(LAST_OFF_SEASON_AVERAGE_VALUE, 0, 999999);
PROC SECTION_9_Q1

POSTPROC
		validateRate(SECTION_9_Q1);
PROC SECTION_9_Q2

POSTPROC
		validateRate(SECTION_9_Q2);
PROC SECTION_9_Q3

	if SECTION_9_Q3 = "B" then
		SECTION_9_Q4 = "N/A";
		SECTION_9_Q5 = notappl;
		SECTION_9_Q6 = "N/A";
		SECTION_9_Q7 = "N/A";
		SECTION_9_Q8 = "N/A";
		LAST_MAJOR_AVERAGE_PRICE = notappl;
		LAST_MAJOR_SLABS_BOUGHT = notappl;
		LAST_MAJOR_AVERAGE_RETAIL = notappl;
		LAST_MAJOR_AVERAGE_PROFIT = notappl;
		LAST_MINOR_AVERAGE_PRICE = notappl;
		LAST_MINOR_SLABS_BOUGHT = notappl;
		LAST_MINOR_AVERAGE_RETAIL = notappl;
		LAST_MINOR_AVERAGE_PROFIT = notappl;
		OFF_SEASON_AVERAGE_PRICE = notappl;
		OFF_SEASON_SLABS_BOUGHT = notappl;
		OFF_SEASON_AVERAGE_RETAIL = notappl;
		OFF_SEASON_AVERAGE_PROFIT = notappl;
		SECTION_9_Q10 = "N/A";
		SECTION_9_Q11 = "N/A";
		SECTION_9_Q12 = "N/A";
		skip to SECTION_9_Q13;
	endif;
PROC SECTION_9_Q4

	if SECTION_9_Q4 = "B" then
		SECTION_9_Q5 = notappl;
		SECTION_9_Q6 = "N/A";
		SECTION_9_Q7 = "N/A";
		SECTION_9_Q8 = "N/A";
		LAST_MAJOR_AVERAGE_PRICE = notappl;
		LAST_MAJOR_SLABS_BOUGHT = notappl;
		LAST_MAJOR_AVERAGE_RETAIL = notappl;
		LAST_MAJOR_AVERAGE_PROFIT = notappl;
		LAST_MINOR_AVERAGE_PRICE = notappl;
		LAST_MINOR_SLABS_BOUGHT = notappl;
		LAST_MINOR_AVERAGE_RETAIL = notappl;
		LAST_MINOR_AVERAGE_PROFIT = notappl;
		OFF_SEASON_AVERAGE_PRICE = notappl;
		OFF_SEASON_SLABS_BOUGHT = notappl;
		OFF_SEASON_AVERAGE_RETAIL = notappl;
		OFF_SEASON_AVERAGE_PROFIT = notappl;
		SECTION_9_Q10 = "N/A";
		SECTION_9_Q11 = "N/A";
		SECTION_9_Q12 = "N/A";
		skip to SECTION_9_Q13;
	endif;
PROC SECTION_9_Q7

POSTPROC
	validateSpecifyInput(SECTION_9_Q7, 'C' ,2);
	
PROC LAST_MAJOR_AVERAGE_PRICE

POSTPROC
	validateRange(LAST_MAJOR_AVERAGE_PRICE, 0, 999999);
PROC LAST_MAJOR_SLABS_BOUGHT

POSTPROC
	validateRange(LAST_MAJOR_SLABS_BOUGHT, 0, 999999);
PROC LAST_MAJOR_AVERAGE_RETAIL

POSTPROC
	validateRange(LAST_MAJOR_AVERAGE_RETAIL, 0, 999999);
PROC LAST_MAJOR_AVERAGE_PROFIT

POSTPROC
	validateRange(LAST_MAJOR_AVERAGE_PROFIT, 0, 999999);
PROC LAST_MINOR_AVERAGE_PRICE

POSTPROC
	validateRange(LAST_MINOR_AVERAGE_PRICE, 0, 999999);
PROC LAST_MINOR_SLABS_BOUGHT

POSTPROC
	validateRange(LAST_MINOR_SLABS_BOUGHT, 0, 999999);
PROC LAST_MINOR_AVERAGE_RETAIL

POSTPROC
	validateRange(LAST_MINOR_AVERAGE_RETAIL, 0, 999999);
PROC LAST_MINOR_AVERAGE_PROFIT

POSTPROC
	validateRange(LAST_MINOR_AVERAGE_PROFIT, 0, 999999);
PROC OFF_SEASON_AVERAGE_PRICE

POSTPROC
	validateRange(OFF_SEASON_AVERAGE_PRICE, 0, 999999);
PROC OFF_SEASON_SLABS_BOUGHT

POSTPROC
	validateRange(OFF_SEASON_SLABS_BOUGHT, 0, 999999);
PROC OFF_SEASON_AVERAGE_RETAIL

POSTPROC
	validateRange(OFF_SEASON_AVERAGE_RETAIL, 0, 999999);
PROC OFF_SEASON_AVERAGE_PROFIT

POSTPROC
	validateRange(OFF_SEASON_AVERAGE_PROFIT, 0, 999999);
PROC SECTION_9_Q10

POSTPROC
	validateSpecifyInput(SECTION_9_Q10,'E', 0);
	
PROC SECTION_9_Q12

POSTPROC
	validateSpecifyInput(SECTION_9_Q12,'C',2);
	
PROC SECTION_9_Q18

POSTPROC
		validateRate(SECTION_9_Q18);

PROC SECTION_10_PART_3_Q3

POSTPROC
		validateRange(SECTION_10_PART_3_Q3, 0,7);
PROC SECTION_10_PART_3_Q4
POSTPROC
	validateRange(SECTION_10_PART_3_Q4, 0,7);


PROC SECTION_10B_Q2
POSTPROC
	validateRange(SECTION_10B_Q2, 0, 100);

PROC SECTION_10B_Q4
POSTPROC
	validateRange(SECTION_10B_Q4, 0, 100);
PROC SECTION_10B_Q6
POSTPROC
	validateRange(SECTION_10B_Q6, 0, 100);

PROC SECTION_10B_Q7

POSTPROC
	validateRange(SECTION_10B_Q7, 0, 31);

PROC SECTION_10B_Q8
POSTPROC
	if strip(SECTION_10B_Q8) = "B" then
		SECTION_10B_Q9 = "N/A";
		skip to SECTION_10B_Q10;
	endif;
PROC SECTION_10B_Q15
POSTPROC
	validateRange(SECTION_10B_Q15, 0,21);
PROC Q1_HOURS
POSTPROC
	validateHour(Q1_HOURS, 1440);

PROC Q1_MINUTE
POSTPROC
	numeric time_left = 1440 - (Q1_HOURS * 60);
	validateMinute(Q1_MINUTE, time_left);

PROC Q1_TOTAL
PREPROC
	Q1_TOTAL = (Q1_HOURS *60) + Q1_MINUTE; 

PROC Q2_HOURS	
POSTPROC
	numeric time_left = 1440 - Q1_TOTAL;
	validateHour(Q2_HOURS, time_left);

PROC Q2_MINUTE
POSTPROC
	numeric time_left = 1440 - (Q1_TOTAL + (Q2_HOURS *60));
	validateMinute(Q2_MINUTE, time_left);
PROC Q2_TOTAL
PREPROC
	Q2_TOTAL = (Q2_HOURS*60) + Q2_MINUTE; 
PROC Q3_HOURS	
POSTPROC
	numeric time_left = 1440 - Q1_TOTAL;
	validateHour(Q2_HOURS, time_left);

PROC Q3_MINUTE
POSTPROC
	numeric time_left = 1440 - (Q2_TOTAL + (Q3_HOURS *60));
	validateMinute(Q3_MINUTE, time_left);
PROC Q3_TOTAL
PREPROC
	Q3_TOTAL = (Q3_HOURS*60) + Q3_MINUTE; 
PROC Q4_HOURS	
POSTPROC
	numeric time_left = 1440 - Q3_TOTAL;
	validateHour(Q4_HOURS, time_left);

PROC Q4_MINUTE
POSTPROC
	numeric time_left = 1440 - (Q3_TOTAL + (Q4_HOURS *60));
	validateMinute(Q4_MINUTE, time_left);
PROC Q4_TOTAL
PREPROC
	Q4_TOTAL = (Q4_HOURS*60) + Q4_MINUTE; 
PROC Q5_HOURS	
POSTPROC
	numeric time_left = 1440 - Q4_TOTAL;
	validateHour(Q5_HOURS, time_left);

PROC Q5_MINUTE
POSTPROC
	numeric time_left = 1440 - (Q4_TOTAL + (Q5_HOURS *60));
	validateMinute(Q5_MINUTE, time_left);
PROC Q5_TOTAL
PREPROC
	Q5_TOTAL = (Q5_HOURS*60) + Q5_MINUTE; 
PROC Q6_HOURS	
POSTPROC
	numeric time_left = 1440 - Q5_TOTAL;
	validateHour(Q6_HOURS, time_left);

PROC Q6_MINUTE
POSTPROC
	numeric time_left = 1440 - (Q5_TOTAL + (Q6_HOURS *60));
	validateMinute(Q6_MINUTE, time_left);
PROC Q6_TOTAL
PREPROC
	Q6_TOTAL = (Q6_HOURS*60) + Q6_MINUTE; 
PROC Q7_HOURS	
POSTPROC
	numeric time_left = 1440 - Q6_TOTAL;
	validateHour(Q7_HOURS, time_left);

PROC Q7_MINUTE
POSTPROC
	numeric time_left = 1440 - (Q6_TOTAL + (Q7_HOURS *60));
	validateMinute(Q7_MINUTE, time_left);
PROC Q7_TOTAL
PREPROC
	Q7_TOTAL = (Q7_HOURS*60) + Q7_MINUTE; 
PROC Q8_HOURS	
POSTPROC
	numeric time_left = 1440 - Q7_TOTAL;
	validateHour(Q8_HOURS, time_left);

PROC Q8_MINUTE
POSTPROC
	numeric time_left = 1440 - (Q7_TOTAL + (Q8_HOURS *60));
	validateMinute(Q8_MINUTE, time_left);
PROC Q8_TOTAL
PREPROC
	Q8_TOTAL = (Q8_HOURS*60) + Q8_MINUTE; 
PROC Q9_HOURS	
POSTPROC
	numeric time_left = 1440 - Q8_TOTAL;
	validateHour(Q9_HOURS, time_left);

PROC Q9_MINUTE
POSTPROC
	numeric time_left = 1440 - (Q8_TOTAL + (Q9_HOURS *60));
	validateMinute(Q9_MINUTE, time_left);
PROC Q9_TOTAL
PREPROC
	Q9_TOTAL = (Q9_HOURS*60) + Q9_MINUTE; 
PROC Q10_HOURS	
POSTPROC
	numeric time_left = 1440 - Q9_TOTAL;
	validateHour(Q10_HOURS, time_left);

PROC Q10_MINUTE
POSTPROC
	numeric time_left = 1440 - (Q9_TOTAL + (Q10_HOURS *60));
	validateMinute(Q10_MINUTE, time_left);
PROC Q10_TOTAL
PREPROC
	Q10_TOTAL = (Q10_HOURS*60) + Q10_MINUTE; 
PROC Q11_HOURS	
POSTPROC
	numeric time_left = 1440 - Q10_TOTAL;
	validateHour(Q11_HOURS, time_left);

PROC Q11_MINUTE
POSTPROC
	numeric time_left = 1440 - (Q10_TOTAL + (Q11_HOURS *60));
	validateMinute(Q11_MINUTE, time_left);
PROC Q11_TOTAL
PREPROC
	Q11_TOTAL = (Q11_HOURS*60) + Q11_MINUTE ; 
PROC Q12_HOURS	
POSTPROC
	numeric time_left = 1440 - Q11_TOTAL;
	validateHour(Q12_HOURS, time_left);

PROC Q12_MINUTE
POSTPROC
	numeric time_left = 1440 - (Q11_TOTAL + (Q12_HOURS *60));
	validateMinute(Q12_MINUTE, time_left);
PROC Q12_TOTAL
PREPROC
	Q12_TOTAL = (Q12_HOURS*60) + Q12_MINUTE; 
PROC Q13_HOURS	
POSTPROC
	numeric time_left = 1440 - Q12_TOTAL;
	validateHour(Q13_HOURS, time_left);

PROC Q13_MINUTE
POSTPROC
	numeric time_left = 1440 - (Q12_TOTAL + (Q12_HOURS *60));
	validateMinute(Q12_MINUTE, time_left);
PROC Q13_TOTAL
PREPROC
	Q13_TOTAL = (Q13_HOURS*60) + Q13_MINUTE; 
PROC Q14_HOURS	
POSTPROC
	numeric time_left = 1440 - Q3_TOTAL;
	validateHour(Q14_HOURS, time_left);

PROC Q14_MINUTE
POSTPROC
	numeric time_left = 1440 - (Q13_TOTAL + (Q14_HOURS *60));
	validateMinute(Q14_MINUTE, time_left);
PROC Q14_TOTAL
PREPROC
	Q14_TOTAL = (Q14_HOURS*60) + Q14_MINUTE; 
PROC Q15_HOURS	
POSTPROC
	numeric time_left = 1440 - Q4_TOTAL;
	validateHour(Q15_HOURS, time_left);

PROC Q15_MINUTE
POSTPROC
	numeric time_left = 1440 - (Q14_TOTAL + (Q15_HOURS *60));
	validateMinute(Q15_MINUTE, time_left);
PROC Q15_TOTAL
PREPROC
	Q15_TOTAL = (Q15_HOURS*60) + Q15_MINUTE; 
PROC Q16_HOURS	
POSTPROC
	numeric time_left = 1440 - Q5_TOTAL;
	validateHour(Q16_HOURS, time_left);

PROC Q16_MINUTE
POSTPROC
	numeric time_left = 1440 - (Q15_TOTAL + (Q16_HOURS *60));
	validateMinute(Q16_MINUTE, time_left);
PROC Q16_TOTAL
PREPROC
	Q16_TOTAL = (Q16_HOURS*60) + Q16_MINUTE; 
PROC Q17_HOURS	
POSTPROC
	numeric time_left = 1440 - Q6_TOTAL;
	validateHour(Q17_HOURS, time_left);

PROC Q17_MINUTE
POSTPROC
	numeric time_left = 1440 - (Q16_TOTAL + (Q17_HOURS *60));
	validateMinute(Q17_MINUTE, time_left);
PROC Q17_TOTAL
PREPROC
	Q17_TOTAL = (Q17_HOURS*60) + Q17_MINUTE; 
PROC Q18_HOURS	
POSTPROC
	numeric time_left = 1440 - Q7_TOTAL;
	validateHour(Q18_HOURS, time_left);

PROC Q18_MINUTE
POSTPROC
	numeric time_left = 1440 - (Q17_TOTAL + (Q18_HOURS *60));
	validateMinute(Q18_MINUTE, time_left);
PROC Q18_TOTAL
PREPROC
	Q18_TOTAL = (Q18_HOURS*60)  + Q18_MINUTE; 

PROC Q19_OTHER_SPECIFY	
POSTPROC
	numeric time_left = 1440 - Q18_TOTAL;
	validateHour(Q19_OTHER_SPECIFY, time_left);

PROC Q19_OTHER_MINUTE_SPECIFY
POSTPROC
	numeric time_left = 1440 - (Q18_TOTAL + ( Q19_OTHER_SPECIFY *60));
	validateMinute(Q19_OTHER_MINUTE_SPECIFY, time_left);
PROC Q19_OTHER_TOTAL_SPECIFY
PREPROC
	Q19_OTHER_TOTAL_SPECIFY = (Q19_OTHER_SPECIFY*60)  + Q19_OTHER_MINUTE_SPECIFY; 
	
PROC Q1A

POSTPROC
	validateRange(Q1A, 1, 999999);
PROC Q1B

POSTPROC
	numeric upper_limit = Q1A-1;
	validateRange(Q1B, 0, upper_limit);
PROC Q1C

POSTPROC
	numeric upper_limit = Q1B-1;
	validateRange(Q1C, 0, upper_limit);
PROC Q1D

POSTPROC
	numeric upper_limit = Q1C-1;
	validateRange(Q1D, 0, upper_limit);
PROC Q1E

POSTPROC
	numeric upper_limit = Q1D-1;
	validateRange(Q1E, 0, upper_limit);
PROC SECTION_13_Q2

POSTPROC
	if SECTION_13_Q1 = "A" then
		if SECTION_13_Q2 < 2000 then
			errmsg("Value must be 2000 or higher");
			reenter;
		endif;
	elseif SECTION_13_Q1 = "B" then
		if SECTION_13_Q2 > 2000 then
			errmsg("Value must be 2000 or less");
			reenter;
		endif;
	endif;

PROC SECTION_Q14_Q2

POSTPROC
	if strip(SECTION_Q14_Q2) = "B" then
		SECTION_Q14_Q3 = "N/A";
		SECTION_Q14_Q4 = "N/A";
		SECTION_Q14_Q5 = "N/A";
		SECTION_Q14_Q6 = "N/A";
		skip to CHOOSE_EXPERIMENT;
	endif;
PROC SECTION_Q14_Q3

POSTPROC
	if strip(SECTION_Q14_Q3) = "B" then
		SECTION_Q14_Q4 = "N/A";
		SECTION_Q14_Q5 = "N/A";
		SECTION_Q14_Q6 = "N/A";
		skip to CHOOSE_EXPERIMENT;
	endif;
PROC SECTION_Q14_Q4

POSTPROC
	if strip(SECTION_Q14_Q4) = "B" then
		SECTION_Q14_Q5 = "N/A";
		SECTION_Q14_Q6 = "N/A";
		skip to CHOOSE_EXPERIMENT;
	endif;
PROC SECTION_Q14_Q5

POSTPROC
	if strip(SECTION_Q14_Q5) = "B" then
		SECTION_Q14_Q6 = "N/A";
		skip to CHOOSE_EXPERIMENT;
	endif;
PROC CHOOSE_EXPERIMENT

POSTPROC 
	if strip(CHOOSE_EXPERIMENT) = "A" then
		EXPERIMENT_B1 = "N/A";
		EXPERIMENT_B2 = "N/A";
		EXPERIMENT_B3 = "N/A";
		EXPERIMENT_B4 = "N/A";
		skip to EXPERIMENT_A1;
	elseif strip(CHOOSE_EXPERIMENT) = "B" then
		EXPERIMENT_A1 = "N/A";
		EXPERIMENT_A2 = "N/A";
		EXPERIMENT_A2 = "N/A";
		EXPERIMENT_A4 = "N/A";
		skip to EXPERIMENT_B1;
	endif;
PROC EXPERIMENT_A1

POSTPROC
	if strip(EXPERIMENT_A1) = "A" then
		EXPERIMENT_A2 = "N/A";
		EXPERIMENT_A3 = "N/A";
		EXPERIMENT_A4 = "N/A";
		skip to TIME;
	endif;
PROC EXPERIMENT_A2

POSTPROC
	if strip(EXPERIMENT_A2) = "A" then
		EXPERIMENT_A3 = "N/A";
		EXPERIMENT_A4 = "N/A";
		skip to TIME;
	endif;
PROC EXPERIMENT_A3

POSTPROC
	if strip(EXPERIMENT_A3) = "A" then
		EXPERIMENT_A4 = "N/A";
		skip to TIME;
	endif;
PROC EXPERIMENT_A4

POSTPROC
	skip to TIME;
PROC EXPERIMENT_B1

POSTPROC
	if strip(EXPERIMENT_B1) = "A" then
		EXPERIMENT_B2 = "N/A";
		EXPERIMENT_B3 = "N/A";
		EXPERIMENT_B4 = "N/A";
		skip to TIME;
	endif;
PROC EXPERIMENT_B2


POSTPROC
	if strip(EXPERIMENT_B2) = "A" then
		EXPERIMENT_B3 = "N/A";
		EXPERIMENT_B4 = "N/A";
		skip to TIME;
	endif;
PROC EXPERIMENT_B3

POSTPROC
	if strip(EXPERIMENT_B3) = "A" then
		EXPERIMENT_B4 = "N/A";
		skip to TIME;
	endif;
PROC TIME

PREPROC
	 TIME = timestring('%X', timestamp());
	
PROC ATTITUDE

HEAD_SELECTED = 0;
